<?php

// This module is holds functions useful for Drupal development.
// Please contribute!

// suggested profiling and stacktrace library from http://www.xdebug.org/index.php
// if you activate this extension, this module will use it.
// you probably want these php.ini or .htaccess directives:
// xdebug.auto_profile=1
// xdebug.auto_profile_mode=3
// xdebug.output_dir="/php"
// xdebug.default_enable

// custom error handling is annoying when stepping though in a debugger
function devel_init() {
  restore_error_handler();
}

function devel_timer() {
  global $timer;
  $stop = explode(" ", microtime());
  $diff = round(($stop[0] - $timer[0])*1000, 2);
  return "Page execution time was $diff ms. ";
}

// don't move this to _footer() hook since this must run after drupal_page_footer() in order 
// to work for cached pages
function devel_exit() {
  global $queries;
  
  if (user_access('access devel information') && !strstr(drupal_get_headers(), 'xml')) { // try not to break the xml pages
    $dev_block_start = "<div style=\"padding-top: 8em;\">";
    $dev_block_end = "</div>";

    // Query log off, timer on
    if (!variable_get("dev_query", 0) && variable_get("dev_timer", 0)) {
      print $dev_block_start . devel_timer() . $dev_block_end;
    }
    
    // Query log on
    if (variable_get("dev_query", 0)) {
      foreach ($queries as $query) {
        $text[] = $query[0];
        $sum += $query[1];
      }
      $counts = array_count_values($text);
    
      print $dev_block_start;
      
      // don't t() this text. it has to work for a cached (aka bootstrap) page.
      $txt = 'Executed '. count($queries). ' queries in '. round($sum * 1000, 2). ' microseconds. ';
      if (function_exists('theme_table')) {
        $txt .= 'Queries taking longer than '. variable_get("devel_execution", 5). ' ms, and queries executed more than once, are <span class="marker">highlighted</span>. ';
        if (variable_get("dev_timer", 0)) { $txt .= devel_timer(); }
        print theme("box", t("Query log"), $txt. devel_query_table($queries, $counts));
      }
      else {
        print $txt;
        dprint_r($queries);
      }
      print $dev_block_end;
    }
    // lots of profile info. not sure how to use it yet.
    if (extension_loaded('xdebug') && ini_get("xdebug.auto_profile")) {
     // comented out because generates too much output. output to log file instead. see xdebug docs
     // dprint_r(xdebug_get_function_profile());;
    };
  }
}

function devel_query_table($queries, $counts) {
  $header = array ("ms", "#", "query");  
  $i = 0;
  foreach ($queries as $query) {
    // dprint_r($query);
    $diff = round($query[1]*1000,2);
    $count = $counts[$query[0]];
    if ($diff > variable_get("devel_execution", 5)) {
      $cell[$i][] = array ("data" => $diff, "class" => "marker");
    }
    else {
      $cell[$i][] = $diff;
    }
    if ($count > 1) {
      $cell[$i][] = array ("data" => $count, "class" => "marker");
    }
    else {
      $cell[$i][] = $count;
    }
    $cell[$i][] = drupal_specialchars($query[0]);
    $i++;
    unset($diff, $count);
  }
  return theme("table", $header, $cell);
}


// handy pretty print of arrays and objects. like var_dump()
function dprint_r($arr) {
  print "<pre>";
  print_r($arr);
  print "</pre>";
} 

// handy pretty print of call stack. no xdebug dependency
function ddebug_backtrace() {
  dprint_r(debug_backtrace());
}

function  devel_help($section) {
  $output = "";

  switch ($section) {
    case 'admin/system/modules#description':
      $output = t("Development helper functions");;
      break;
  }
  return $output;
}

function devel_settings() {  
  $output = form_select(t("Display Page Timer"), "dev_timer", variable_get("dev_timer", 0), array(t("Disabled"), t("Enabled")), t("Display page execution time in the query log box."));
  $output .= form_select(t("Display query log"), "dev_query", variable_get("dev_query", 0), array(t("Disabled"), t("Enabled")), t("Display a log of the database queries needed to generate the current page, the and the execution time for each. Also, a queries which are repeated during a single page view are summed in the # column, and printed in red since they are candidates for caching."));
  $output .= form_textfield("Query execution threshhold", "devel_execution", variable_get("devel_execution", 5), 4, 4, t("Enter an integer in milliseconds. Any query which takes longer than this many milliseconds will be highlighted in the query log. This indicates a possibliy inefficient query, or a candidate for caching."));
  return $output;
}

function devel_perm() {
  return array('access devel information');
}

?>
